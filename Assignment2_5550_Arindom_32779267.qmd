---
title: "ETC5550 Assignment 2"
author: "Arindom Baruah (32779267)"
date: "2024-03-22"
quarto-required: ">=1.3.0"
format:
    html:
        output-file: assign02-submission.html
        css: "assignment.css"
execute: 
  echo: false
  message: false
  warning: false
number-sections: true
---

# Libraries used

```{r}
#| echo: TRUE
library(fpp3)
library(tidyverse)
library(kableExtra)
library(latex2exp)
library(plotly)
```

# Glimpse of the data

```{r}
#| echo: false
get_my_data <- function(student_id) {
  set.seed(student_id)
  all_data <- fill_gaps(readr::read_rds("https://bit.ly/monashretaildata"))
  while(TRUE) {
    retail <- filter(all_data, `Series ID` == sample(`Series ID`, 1)) 
    if(!any(is.na(retail$Turnover))) return(retail)
  }
}
# Replace the argument with your student ID
retail <- get_my_data(32779267)
```


Once we have obtained our data, let us take a quick glimpse of the data as illustrated by @tbl-data. 

```{r}
#| label: tbl-data
#| tbl-cap: "Sample of the current retail data"

retail %>% head() %>% kbl()
```

# Exercises

## Plotting of timeseries {#sec-plot}

Let us observe the time series data for the turnover generated.

```{r}
#| label: fig-turnover
#| fig-cap: "Retailing turnover in Western Australia over time"
retail %>% autoplot(Turnover) + labs(x = "Date",y = "Turnover (mil $)",title="Retailing turnover in Western Australia over time",caption = "Source: Australian Bureau of Statistics") + geom_point(data = NULL, aes(x = "2020-02-15", y = 50), color = "red", shape = 1, size = 7) + theme_minimal()


```
:::{.callout-note}
# Key takeaway

Based on @fig-turnover we can observe the following details in the timeseries plot:

1. There appears to be a seasonality in the plot with a spike being observed on every December of a year. __The seasonality additionally appears to be consistent throughout the plot.__

2. The amplitude of the spikes observed in the data appear to be increasing with time. __This indicates that the variation in seasonality of the data is multiplicative in nature.__

3. The plot also indicates the presence of an __additive trend__ in the data with overall turnover increasing every year except for the year of 2020 in a linear fashion. 

4. There appears to be an __outlier in the data during the year of 2020__ as indicated by the <span style=color:red>red cricle</span>.While on each January of every year, we expect a rise in turnover, however, in the year of January 2020, the turnover was considerably lower than all the other years. This is expected to be caused due to __shutting down of businesses and their activities in the initial part of the pandemic.__
:::

## Plotting of timeseries data with gg_season {#sec-season}

```{r}
#| label: fig-seasonplot
#| fig-cap: "Variation of retailing turnover within a year in Western Australia"
ggplotly(retail %>% gg_season(Turnover) + labs(x = "Month",y = "Turnover (mil $)",title="Variation of retailing turnover within a year in Western Australia",caption = "Source: Australian Bureau of Statistics")  + theme_minimal())

```
:::{.callout-note} 
# Key takeaway
@fig-seasonplot illustrates the turnover generated by the Australian retailers for each year. Some key observations are as follows:

1. The turnover generated in Australia has been on a rise each year. This suggests that the expenditure of people on retailing services in Australia have been increasing each year and could be attributed to the growing population in the country. 

2. We observe that the retailing turnovers in each year are __generally higher in the months of November and December__. This could be a result of the festive period when there are many customers purchasing gifts for families or going out to eat in various restaurants, etc. 

3. Additionally, the month of November also includes the __Black Friday sale__ which attracts multiple customers to purchase items due to specialised promotions. This may indicate the slight rise in turnover during the month of November each year.

4. The __rise in the retail turnovers for the month of December are especially higher during the more recent years (2011-2021)__. This could again be an indicator for the growing population in the country during this period, which has gone on to to create a bigger market and drive sales, hence, contributing to the higher turnover.

5. There appears to be one single year when the retail __turnover dropped steeply in the month of April but eventually picked up for the rest of the year.__ This could be an indicator of the effects of the COVID-19 lockdown when the business activities were very limited and prevented multiple retailers in various regions of Australia to be able to generate revenue.

:::


## Plotting of timeseries data with gg_subseries

```{r}
#| label: fig-subseries
#| fig-cap: "Variation of retailing turnover in each month of a year in Australia"
retail %>% gg_subseries(Turnover) + labs(x = "Year",y = "Turnover (mil $)",title="Variation of retailing turnover in each month of a year in Australia",caption = "Source: Australian Bureau of Statistics")  
```

:::{.callout-note}
# Key takeaway

@fig-subseries illustrates the variation of retailing turnover faceted by each month and plotted against years. Key observations are as follows:

1. As already observed in @sec-season, the plot suggests that the __retailing turnover has increased each year from 1990 to 2022.__

2. The average __retail turnover is observed to be higher for the month of December when compared to the rest of the year.__ As explained previously, the main driver for the boost of retailing turnover in this period is attributed to the festive season which includes Christmas, Boxing Day and the run up to the New Year Eve.

3. A __drop in retail turnover for the months of March, April and May was observed in 2020.__ This can be attributed to the lockdowns set in place when the pandemic outbreak was first experienced.
:::

## Box-Cox transformation of the data

### Estimating the value of $\lambda$

In order to apply the Box-Cox transformation, we are required to obtain the appropriate value of the parameter $\lambda$ which will allow us to analyse the timeseries data with the seasonal variations being equal at all levels, thereby transforming the multiplicative variation in the data into an additive variation.

```{r}
#| label: fig-sqrt
#| fig-cap: "Transformation of the annual retailing turnover by square root transformation"
lambda = 0.5 # Square root transformation

retail |>
  autoplot(box_cox(Turnover, lambda)) +
  labs(y = "Square root of Turnover (mil $)",x = "Timeline",
       title = latex2exp::TeX(paste0(
         "Transformed annual retailing turnover with $\\lambda$ = ",
         round(lambda,2)))) + theme_minimal()
```
@fig-sqrt illustrates a square root transformation. As we can observe, the __square root transformation appears to be weak in nature__, and hence, not be able to effectively make the variations in seasonality equal.


Let us now attempt to transform the data using $\lambda = 0.25$

```{r}
#| label: fig-qtr
#| fig-cap: "Transformation of the annual retailing turnover by 1/4 root transformation"

lambda = 0.25 # 1/4th root transformation

retail |>
  autoplot(box_cox(Turnover, lambda)) +
  labs(y = "1/4 root of Turnover (mil $)",x = "Timeline",
       title = latex2exp::TeX(paste0(
         "Transformed annual retailing turnover with $\\lambda$ = ",
         round(lambda,2)))) + theme_minimal()
```
As observed in @fig-qtr, the transformation appears to be weak in the lower seasonality variation (towards the early years) as compared to the higher seasonality variation (towards the later years). 

In order to increase the effect of the Box-Cox transformation, we will need to reduce the $\lambda$ value further. Let us try using $\lambda = 0.1$.

```{r}
#| label: fig-ten
#| fig-cap: "Transformation of the annual retailing turnover by 10th root transformation"

lambda = 0.1 # 1/10th root transformation

retail |>
  autoplot(box_cox(Turnover, lambda)) +
  labs(y = "1/10 root of Turnover (mil $)",x = "Timeline",
       title = latex2exp::TeX(paste0(
         "Transformed annual retailing turnover with $\\lambda$ = ",
         round(lambda,2)))) + theme_minimal()
```

Based on @fig-ten, it appears that a transformation with $\lambda = 0.1$ has still missed out in the seasonality variation during the early years as there still appears to be some amount of minor differences between the initial seasonality variation and the later seasonality variation.


Due to the inherent low sensitivity of the $\lambda$ parameter, we can consider that any value lower than 0.1 to have the same effect as when $\lambda = 0$. This means that the Box-Cox transformation approaches towards a logarithmic transformation.


Let us attempt to visualise this by performing a log transformation through $\lambda = 0$

```{r}
#| label: fig-transform-log
#| fig-cap: "Transformation of the annual retailing turnover by Log transformation"
lambda = 0 # Log transformation

retail |>
  autoplot(box_cox(Turnover, 0)) +
  labs(y = "Log of Turnover (mil $)",x = "Timeline",
       title = latex2exp::TeX(paste0(
         "Transformed annual retailing turnover with $\\lambda$ = ",
         round(lambda,2)))) + theme_minimal()
```
:::{.callout-note}

@fig-transform-log illustrates the timeseries data for retailing turnover after being transformed through the Box-Cox transformation on the log scale. Here are some key observations:

1. We observe that unlike the original data, the variation in seasonality of the Log transformed data was much more similar through the timeseries.

2. Using the Log transformation, the datapoints with lower seasonality variation (data in the initial time period) was stretched to larger variations while the datapoints with higher seasonality variation (data in the later time period) was compressed to relatively smaller variations.

3. Since the variations are fairly similar throughout the entire period of the data, we can consider the transformed data to contain an additive variation of seasonality.

4. Usage of a __log transformation also provides better interpretability as changes in a log value are proportional to changes on the original scale, mulitplied by a factor.__

:::

We can additionally use the Guerrero transformation as a means to automate the process of obtaining a $\lambda$ value. Based on this optimisation technique, a value of $\lambda = -0.09$ was obtained. The corresponding plot upon transformation can be observed in @fig-transform.

```{r}
#| label: fig-transform
#| fig-cap: "Transformation of the annual retailing turnover data using Box-Cox method"

lambda <- retail |>
  features(Turnover, features = guerrero) |>
  pull(lambda_guerrero)

retail |>
  autoplot(box_cox(Turnover, lambda)) +
  labs(y = "Turnover (mil $)",x = "Timeline",
       title = latex2exp::TeX(paste0(
         "Transformed annual retailing turnover with $\\lambda$ = ",
         round(lambda,2)))) + theme_minimal()
```


## STL decomposition of the timeseries data

```{r}
#| label: fig-stl
#| fig-cap: "STL decomposition of annual retailing turnover"
retail %>% model(STL(box_cox(Turnover,0) ~ trend(window = 31) + 
                             season(window = 30), robust = TRUE)) %>%
  components() %>% autoplot() + labs(x = "Timeline",
                                     y = "Log transformed turnover in mil $",
                                     title = "STL decomposition of annual retailing turnover")
```

:::{.callout-note}
# Key takeaway

Based on the STL decomposition for the log based transformation done as illustrated by @fig-stl, we observe the following:

1. The trend of the transformed data suggests a __somewhat linear (and hence an additive) rise in the overall annual retailing turnover.__

2. The __seasonality of the data is observed to be fairly constant in each year, with a peak appearing during the end of the year as a result of the higher expenditures expected during the festive season.__

3. The __remainder plot illustrates an outlier in the data close to the year of 2020. This indicates the underwhelming retailing turnovers due to the outbreak of COVID-19__ that resulted in the shutting down of many business activities for a period of few months. 

:::


# Reference

1. __fpp3__: Hyndman R (2023). _fpp3: Data for "Forecasting: Principles and Practice" (3rd Edition)_. R package version 0.5, <https://CRAN.R-project.org/package=fpp3>.

2. __tidyverse__: Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). “Welcome to the tidyverse.” _Journal of Open Source Software_, *4*(43), 1686. doi:10.21105/joss.01686 <https://doi.org/10.21105/joss.01686>.

3. __kableExtra__: Zhu H (2024). _kableExtra: Construct Complex Table with 'kable' and Pipe Syntax_. R package version 1.4.0, <https://CRAN.R-project.org/package=kableExtra>.

4. __latex2exp__: Meschiari S (2022). _latex2exp: Use LaTeX Expressions in Plots_. R package version 0.9.6, <https://CRAN.R-project.org/package=latex2exp>.